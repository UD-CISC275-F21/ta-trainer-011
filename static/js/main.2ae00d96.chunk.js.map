{"version":3,"sources":["utilities/addition.tsx","components/Prompt.tsx","components/SwapButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["data","Prompt","text","SwapButton","change","useState","active","setActive","onClick","first","second","App","prompt","setPrompt","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uJAwB4BA,EAMrB,E,6DC7BMC,EAAS,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,KACtB,OAAO,8BAAMA,KCAFC,EAAa,SAAC,GAA6D,IAA5DC,EAA2D,EAA3DA,OAC1B,EAA4BC,oBAAkB,GAA9C,mBAAOC,EAAP,KAAeC,EAAf,KAWA,OAAO,wBAAQC,QAAS,kBAPpBJ,EADEE,EACK,eAEA,sBAETC,GAAWD,IAGN,0BFUmBN,EAIhB,CAACS,MAAO,EAAGC,OAAQ,GAHTV,EAAKU,OAKpB,EAIA,CAACD,MAAO,EAAGC,OAAQ,GAJuD,EAAlDA,OGbhBC,MAXf,WACE,MAA4BN,mBAAiB,iBAA7C,mBAAOO,EAAP,KAAeC,EAAf,KAEA,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAQZ,KAAMU,IACd,cAAC,EAAD,CAAYR,OAAQS,QCEXE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2ae00d96.chunk.js","sourcesContent":["/*interface Person {\r\n  name: string\r\n  shirtColor: string\r\n}\r\n\r\nconst drBart: Person = {name: \"Dr. Bart\", shirtColor: \"purple\"}\r\nconst ada: Person = {name: \"Ada Bart\", shirtColor: \"yellow\"}\r\n\r\nconst {name} = ada\r\n\r\nconsole.log(name)\r\n\r\nconst numbers = [1, 2, 3]\r\nconst [num1, num2, thirdNumber] = numbers\r\nconsole.log(thirdNumber)\r\n*/\r\n\r\n\r\nexport function adder(first: number, second: number): number {\r\n  return first + second;\r\n}\r\n\r\nadder(3, 5)\r\n\r\nexport function adderObject(data: {first: number, second: number}): number {\r\n  return data.first + data.second;\r\n}\r\n\r\nadderObject({first: 7, second: 9})\r\n\r\nexport function adder3({first, second}: {first: number, second: number}): number {\r\n  return first + second;\r\n}\r\n\r\nadder3({first: 7, second: 9})\r\n\r\nexport function sumList(numbers: number[]): number {\r\n  return numbers[0] + numbers[1] + numbers[2];\r\n}","\r\nexport const Prompt = ({text}: {text: string}): JSX.Element => {\r\n  return <div>{text}</div>\r\n}","import { useState } from \"react\"\r\n\r\nexport const SwapButton = ({change}: {change: (text: string) => void}): JSX.Element => {\r\n  const [active, setActive] = useState<boolean>(false);\r\n\r\n  const toggle = () => {\r\n    if (active) {\r\n      change(\"FIRST PROMPT\");\r\n    } else {\r\n      change(\"SECOND PROMPT\");\r\n    }\r\n    setActive(!active);\r\n  }\r\n\r\n  return <button onClick={() => toggle()}>Swap Prompt</button>\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { Prompt } from './components/Prompt';\nimport { SwapButton } from './components/SwapButton';\nimport './utilities/addition';\n\nfunction App(): JSX.Element {\n  const [prompt, setPrompt] = useState<string>(\"Do Something!\");\n  \n  return (\n    <div className=\"App\">\n      <Prompt text={prompt}></Prompt>\n      <SwapButton change={setPrompt}></SwapButton>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}